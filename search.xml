<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第1章Java程序设计概述</title>
      <link href="/2023/08/25/%E7%AC%AC1%E7%AB%A0Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%A6%82%E8%BF%B0/"/>
      <url>/2023/08/25/%E7%AC%AC1%E7%AB%A0Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-Java-程序设计平台">1.1 Java 程序设计平台</h2><p>Java是一个<mark class="hl-label blue">完整的平台</mark> ，有一个<mark class="hl-label blue">庞大的库</mark> ，其中包含了<mark class="hl-label blue">大量可重用的代码</mark> ，还有提供诸如<mark class="hl-label default">安全性</mark> 、<mark class="hl-label default">跨操作系统</mark> 的<mark class="hl-label orange">可移植性</mark> 以及<mark class="hl-label orange">自动垃圾收集</mark> 等服务的<mark class="hl-label blue">执行环境</mark> 。</p><h2 id="1-2-Java-白皮书的关键术语">1.2 Java 白皮书的关键术语</h2><ul><li><mark class="hl-label blue">简单性</mark> <blockquote><p>Java语法是C++语法的一个“纯净”版本。Java剔除了C++中许多很少使用、难以理解、容易混淆的特性。</p><p>“简单”的另一面是“小”。Java的目标之一是支持开发能够在小型机器上独立运行的软件，这类软件通常适用于嵌入式设备和智能卡。</p></blockquote></li><li><mark class="hl-label blue">面向对象</mark> <blockquote><p>开发Java时面向对象技术已经相当成熟。在Java中使用了更简单的接口概念，取代了C++中的多重继承。</p></blockquote></li><li><mark class="hl-label blue">分布式</mark> <blockquote><p>Java能够通过URL打开和访问网上的对象，其便捷程度就好像访问本地文件一样。</p><p>如今，这一点被认为理所当然，不过在1995年主要还是从C++或Visual Basic程序连接Web服务器。</p></blockquote></li><li><mark class="hl-label blue">健壮性</mark> <blockquote><p>Java编译器能够检测许多其他语言中仅在运行时才能检测出来的问题。</p><p>Java与C/C++最大的不同在于Java采用的指针模型可以消除重写内存和损坏数据的可能性。</p></blockquote></li><li><mark class="hl-label blue">安全性</mark> <blockquote><p>从一开始，Java就设计成能够防范各种攻击，其中包括：</p><ul><li>运行时堆栈溢出（这是蠕虫和病毒常用的攻击手段）</li><li>破坏自己的进程空间之外的内存（<mark class="hl-label default">这里应该是指GC吧</mark> ）</li><li>未经授权读写文件</li></ul><p>现在看来，尽管Java安全模型没有原先预想的那么成功，但Java在那个时代确实相当超前。</p></blockquote></li><li><mark class="hl-label blue">体系结构中立</mark> <blockquote><p>Java编译器通过生成与特定计算体系结构无关的字节码来实现。精心设计的字节码不仅很容易在任何机器上解释执行，而且也很容易动态转换为原生机器代码。</p><p>为“虚拟机”生成代码在当时并不是一个新思路，诸如 Lisp、Smalltalk、Pascal等多年前就已经采用了这种技术。</p><p>当然，解释虚拟机指令肯定比全速运行机器指令慢很多。不过，虚拟机可以将执行最频繁的字节码序列转换成机器码，这一过程称为即时编译（just-in-time compilation）。</p><p>同时，虚拟机还可以检查指令序列的行为，从而增强安全性。</p></blockquote></li><li><mark class="hl-label blue">可移植性</mark> <blockquote></blockquote></li><li><mark class="hl-label blue">解释性</mark> <blockquote></blockquote></li><li><mark class="hl-label blue">高性能</mark> <blockquote></blockquote></li><li><mark class="hl-label blue">多线程</mark> <blockquote></blockquote></li><li><mark class="hl-label blue">动态性</mark> <blockquote></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> java核心技术 </category>
          
          <category> 开发基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 术语 </tag>
            
            <tag> 简史 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
